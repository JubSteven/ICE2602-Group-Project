INDEX_DIR = "index_files.index1"
from flask import Flask, redirect, render_template, request, url_for
import lucene
from java.io import File
from utility import *
from pic_feature_extraction import *
import pandas as pd


web = Flask(__name__)
@web.route('/form', methods=['POST', 'GET'])
def index():
    if request.method == "POST":
        keyword = request.form['keyword']
        
        img = request.files.get('picture') # 从post请求中获取图片数据
        # suffix = '.' + img.filename.split('.')[-1] # 获取文件后缀名
        # basedir = os.path.abspath(os.path.dirname(__file__)) # 获取当前文件路径
        # photo = str(int(time.time())) + suffix # 拼接相对路径
        # img_path = basedir + photo # 拼接图片完整保存路径,时间戳命名文件防止重复
        # print(img_path)
        
        # 感觉可能是我拿到的这个picture只是一个类似于‘target.jpg’的字符串而非这个具体的target.jpg的内容
        # keyword = getMatch(picture)
        return redirect(url_for('result', keyword=keyword, picture=img))
    return render_template("index.html")


@web.route('/result', methods=['GET', 'POST'])
def result():
    STORE_DIR = "index"
    vm_env.attachCurrentThread()
    directory = SimpleFSDirectory(File(STORE_DIR).toPath())
    searcher = IndexSearcher(DirectoryReader.open(directory))
    analyzer = WhitespaceAnalyzer()
    
    sort_opt = "default" # 排序方式
    page = 1 # 当前的page

    brand_filter = 0 # 不筛选品牌
    type_filter = 0 # 不筛选类别
    reverse_opt = 0 # 不倒序
    
    
    if request.method == "POST":
        keyword = request.form['keyword']
    else:
        keyword = request.args.get('keyword')
        picture = request.args.get('picture')
        if keyword == "":
            keyword = getMatch(picture)
            print("Keyword generated by picture ", keyword)
            
            
        keyword = ' '.join(jieba.cut(keyword))
        sort_opt = request.args.get("sort")
        if request.args.get("page") is not None:
            page = request.args.get("page")
            page = int(page)
        if request.args.get("brand_filter") is not None:
            brand_filter = request.args.get("brand_filter")
        if request.args.get("type_filter") is not None:
            type_filter = request.args.get("type_filter")
        if request.args.get("reverse") is not None:
            reverse_opt = int(request.args.get("reverse"))
            
    results = get_search_result(searcher, analyzer, keyword)
    results = sort_(results, sort_opt, reverse_opt)
    
    
    actual_length = len(results[0])
    if actual_length % 50 != 0:
        max_page = actual_length // 50 + 1 # 每个页面最多展示50条信息，max_page记录了网页最大值
    else:
        max_page = actual_length // 50
        
    max_page = min(max_page, 15) # 最多保留750条记录
    
    left_bound = int(50 * (page - 1))
    right_bound = min(int(50 * page), actual_length)
    
    title_lst = results[0][left_bound:right_bound]
    product_url_lst = results[1][left_bound:right_bound]
    pic_url_lst = results[2][left_bound:right_bound]
    price_lst = results[3][left_bound:right_bound]
    advertisement_lst = results[4][left_bound:right_bound]
    comments_lst = results[5][left_bound:right_bound]
    shop_url_lst = results[6][left_bound:right_bound]
    shop_lst = results[7][left_bound:right_bound]
    keyword_lst = keyword_processing(results[8])[left_bound:right_bound]
    command_lst = results[9][left_bound:right_bound]
        
    length = len(title_lst)
    # print(length)
    del searcher
            
    return render_template("result.html", \
                            keyword=keyword,\
                            page=page, \
                            max_page = max_page, \
                            length=length // 3, \
                            result_length = actual_length, \
                            brand_filter = brand_filter, \
                            type_filter = type_filter, \
                            title_lst=title_lst, \
                            product_url_lst=product_url_lst, \
                            shop_url_lst=shop_url_lst, \
                            shop_lst=shop_lst, \
                            pic_url_lst=pic_url_lst, \
                            price_lst=price_lst, \
                            advertisement_lst=advertisement_lst, \
                            comments_lst=comments_lst, \
                            keyword_lst=keyword_lst, \
                            sort = sort_opt,
                            reverse = reverse_opt)
 
@web.route('/comments', methods=['GET', 'POST'])
def product_comments():
    df = pd.read_csv("comments.csv")
    df_lst = df.values.tolist()
    
    keyword = None
    score = None
    comment_avg_score = None
    wordmap_src = None
    status = 0
    
    target_url = request.args.get('target_url')
    for i in range(len(df_lst)):
        if (df_lst[i][1] == target_url):
            keyword = df_lst[i][3]
            score = df_lst[i][2]
            comment_avg_score = df_lst[i][4]
            ID = ''.join(list(filter(str.isdigit, target_url)))
            wordmap_src = "/static/wordcloud_{}.png".format(ID)
            status = 1
            
    if keyword is not None:
        keyword_lst = keyword.split("/")
        length = len(keyword_lst)
    else:
        keyword_lst = None
        length = 0
        
    
           
    return render_template("comments.html", \
                            status = status, \
                            keyword_lst = keyword_lst, \
                            score = score, \
                            comment_avg_score = comment_avg_score,\
                            wordmap_src = wordmap_src, \
                            length = length)
     

vm_env=None
if __name__ == "__main__":
    vm_env = lucene.initVM()
    web.run(debug=True, port=8080)
